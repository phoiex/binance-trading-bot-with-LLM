# 期货交易机器人 - Prompt优化与数据处理流程详解

## 概述

本文档详细说明了期货交易机器人从原始数据获取到AI分析输出的完整数据处理流程，以及如何优化AI提示词以获得最佳分析结果。

## 数据获取与处理流程

### 第一阶段：原始数据获取 (FuturesDataManager)

#### 1.1 从Binance Futures API获取的原始数据类型

**K线数据 (Klines)**
- 数据源：`client.futures_klines(symbol, interval, limit)`
- 原始格式：数组，每个元素包含11个字段
  ```python
  [
    1640995200000,      # 0: 开盘时间戳
    "46932.10000000",   # 1: 开盘价
    "47200.00000000",   # 2: 最高价
    "46926.00000000",   # 3: 最低价
    "47150.00000000",   # 4: 收盘价
    "1234.56780000",    # 5: 成交量
    1640995259999,      # 6: 收盘时间戳
    "58123456.78900000", # 7: 成交额
    1789,               # 8: 成交笔数
    "612.34560000",     # 9: 主动买入成交量
    "28987654.32100000" # 10: 主动买入成交额
  ]
  ```

**账户信息 (Account Info)**
- 数据源：`client.futures_account()`
- 关键字段：
  ```python
  {
    "totalWalletBalance": "1234.56",    # 总钱包余额
    "totalUnrealizedPnL": "-12.34",     # 总未实现盈亏
    "totalMarginBalance": "1222.22",    # 总保证金余额
    "availableBalance": "1000.00",      # 可用余额
    "maxWithdrawAmount": "1000.00"      # 最大可提取金额
  }
  ```

**持仓信息 (Positions)**
- 数据源：`client.futures_position_information()`
- 活跃持仓筛选条件：`float(position["positionAmt"]) != 0`
- 关键字段：
  ```python
  {
    "symbol": "BTCUSDT",
    "positionAmt": "0.001",        # 持仓数量
    "entryPrice": "45000.0",       # 开仓价格
    "markPrice": "47000.0",        # 标记价格
    "unRealizedPnL": "2.0",        # 未实现盈亏
    "percentage": "4.44",          # 收益率百分比
    "leverage": "10"               # 杠杆倍数
  }
  ```

**24小时统计 (Ticker Statistics)**
- 数据源：`client.futures_ticker(symbol)`
- 关键字段：
  ```python
  {
    "lastPrice": "47000.0",           # 最新价格
    "priceChange": "1000.0",          # 价格变化
    "priceChangePercent": "2.17",     # 价格变化百分比
    "volume": "123456.789",           # 24h成交量
    "quoteVolume": "5876543210.123"   # 24h成交额
  }
  ```

**资金费率历史 (Funding Rate History)**
- 数据源：`client.futures_funding_rate(symbol, limit)`
- 数据格式：
  ```python
  {
    "symbol": "BTCUSDT",
    "fundingRate": "0.0001",      # 资金费率 (正数=多头付费，负数=空头付费)
    "fundingTime": 1640995200000, # 资金费率时间
    "markPrice": "47000.0"        # 标记价格
  }
  ```

**持仓量 (Open Interest)**
- 数据源：`client.futures_open_interest(symbol)`
- 数据格式：
  ```python
  {
    "symbol": "BTCUSDT",
    "openInterest": "123456.789",  # 持仓量
    "time": 1640995200000          # 时间戳
  }
  ```

**订单簿深度 (Order Book)**
- 数据源：`client.futures_order_book(symbol, limit=10)`
- 数据格式：
  ```python
  {
    "bids": [                   # 买盘 [[价格, 数量], ...]
      ["46990.0", "1.234"],
      ["46980.0", "2.345"]
    ],
    "asks": [                   # 卖盘 [[价格, 数量], ...]
      ["47010.0", "1.567"],
      ["47020.0", "2.678"]
    ]
  }
  ```

#### 1.2 增强多时间周期配置

系统支持的5层时间周期及其数据量配置（经过优化以确保技术指标计算准确性）：
```python
timeframes = {
    "1m": {"limit": 200, "description": "1分钟"},    # 确保SMA200等长期指标可计算
    "5m": {"limit": 288, "description": "5分钟"},    # 24小时数据
    "15m": {"limit": 336, "description": "15分钟"},  # 新增：3.5天数据，详细分析
    "1h": {"limit": 720, "description": "1小时"},    # 30天数据
    "4h": {"limit": 180, "description": "4小时"},    # 30天数据
    "1d": {"limit": 365, "description": "日线"},     # 1年数据
    "1w": {"limit": 104, "description": "周线"},     # 2年数据
    "1M": {"limit": 36, "description": "月线"}       # 新增：3年数据，全局视角
}
```

**新增时间周期说明**：
- **15分钟周期**: 提供比1小时更细致的短期分析，适合捕捉日内波动和短期趋势
- **月线周期**: 提供最宏观的市场视角，识别长期趋势和重要支撑阻力位

**数据量优化原则**：
- 保证所有技术指标计算准确性（SMA200需要200期数据）
- 平衡数据获取效率和分析精度
- 最终传给AI的仍然是处理后的指标摘要，而非原始K线数据

### 第二阶段：数据预处理与标准化

#### 2.1 K线数据标准化

原始Binance K线数据转换为标准格式：
```python
def format_kline_data(raw_kline):
    return {
        'open_time': int(raw_kline[0]),              # 毫秒时间戳
        'open': float(raw_kline[1]),                 # 开盘价
        'high': float(raw_kline[2]),                 # 最高价
        'low': float(raw_kline[3]),                  # 最低价
        'close': float(raw_kline[4]),                # 收盘价
        'volume': float(raw_kline[5]),               # 成交量
        'close_time': int(raw_kline[6]),             # 收盘时间戳
        'quote_asset_volume': float(raw_kline[7]),   # 成交额
        'number_of_trades': int(raw_kline[8]),       # 成交笔数
        'taker_buy_base_asset_volume': float(raw_kline[9]),   # 主动买入量
        'taker_buy_quote_asset_volume': float(raw_kline[10])  # 主动买入额
    }
```

#### 2.2 账户数据标准化

```python
def format_account_info(raw_account):
    return {
        "total_wallet_balance": float(raw_account.get("totalWalletBalance", 0)),
        "total_unrealized_pnl": float(raw_account.get("totalUnrealizedPnL", 0)),
        "total_margin_balance": float(raw_account.get("totalMarginBalance", 0)),
        "available_balance": float(raw_account.get("availableBalance", 0)),
        "max_withdraw_amount": float(raw_account.get("maxWithdrawAmount", 0))
    }
```

### 第三阶段：技术指标计算

#### 3.1 基础价格指标

**移动平均线系统**
```python
# 简单移动平均线
df['sma_7'] = df['close'].rolling(window=7).mean()
df['sma_20'] = df['close'].rolling(window=20).mean()
df['sma_50'] = df['close'].rolling(window=50).mean()
df['sma_200'] = df['close'].rolling(window=200).mean()

# 指数移动平均线
df['ema_12'] = df['close'].ewm(span=12).mean()
df['ema_26'] = df['close'].ewm(span=26).mean()
df['ema_50'] = df['close'].ewm(span=50).mean()
```

**RSI (相对强弱指标)**
```python
def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi
```

**MACD (移动平均收敛散度)**
```python
df['macd'] = df['ema_12'] - df['ema_26']                    # MACD线
df['macd_signal'] = df['macd'].ewm(span=9).mean()          # 信号线
df['macd_histogram'] = df['macd'] - df['macd_signal']      # 柱状图
```

**布林带 (Bollinger Bands)**
```python
df['bb_middle'] = df['close'].rolling(window=20).mean()    # 中轨
bb_std = df['close'].rolling(window=20).std()              # 标准差
df['bb_upper'] = df['bb_middle'] + (bb_std * 2)            # 上轨
df['bb_lower'] = df['bb_middle'] - (bb_std * 2)            # 下轨
df['bb_width'] = (df['bb_upper'] - df['bb_lower']) / df['bb_middle'] * 100  # 带宽
```

#### 3.2 波动率指标

**ATR (平均真实波幅)**
```python
df['tr1'] = df['high'] - df['low']                         # 当日最高最低价差
df['tr2'] = abs(df['high'] - df['close'].shift())         # 当日最高价与前日收盘价差
df['tr3'] = abs(df['low'] - df['close'].shift())          # 当日最低价与前日收盘价差
df['tr'] = df[['tr1', 'tr2', 'tr3']].max(axis=1)          # 真实波幅
df['atr'] = df['tr'].rolling(window=14).mean()            # 平均真实波幅
```

**历史波动率**
```python
df['returns'] = df['close'].pct_change()                   # 收益率
# 7天波动率 (年化)
volatility_7d = df['returns'].rolling(window=168).std() * np.sqrt(24) * 100
# 30天波动率 (年化)
volatility_30d = df['returns'].rolling(window=720).std() * np.sqrt(24) * 100
```

#### 3.3 成交量指标

```python
df['volume_sma'] = df['volume'].rolling(window=20).mean()  # 成交量移动平均
volume_ratio = df['volume'].iloc[-1] / df['volume_sma'].iloc[-1]  # 成交量比率
```

#### 3.4 趋势强度计算

使用线性回归计算趋势强度：
```python
def calculate_trend_strength(prices, period=20):
    y = prices.tail(period).values
    x = np.arange(len(y))
    correlation_matrix = np.corrcoef(x, y)
    correlation = correlation_matrix[0, 1]
    r_squared = correlation ** 2
    return float(r_squared * 100)  # 转换为百分比
```

### 第四阶段：数据聚合与格式化

#### 4.1 综合市场数据结构

经过处理的数据按以下结构组织：
```python
comprehensive_market_data = {
    'timestamp': '2024-01-01T12:00:00',
    'data_type': 'futures_comprehensive',
    'account_info': {
        'total_wallet_balance': 1000.00,
        'available_balance': 800.00,
        'total_unrealized_pnl': -50.00
    },
    'positions': [
        {
            'symbol': 'BTCUSDT',
            'position_amount': 0.01,
            'unrealized_pnl': 10.00,
            'leverage': 5
        }
    ],
    'symbols': {
        'BTCUSDT': {
            'basic_info': {
                'last_price': 47000.00,
                'price_change_percent': 2.17,
                'volume': 123456.789
            },
            'multi_timeframe_data': {
                '1h': {'data': [...], 'count': 720},
                '4h': {'data': [...], 'count': 180},
                '1d': {'data': [...], 'count': 365}
            },
            'timeframe_indicators': {
                '1h': {
                    'current_price': 47000.00,
                    'rsi': 65.5,
                    'macd': 123.45,
                    'sma_20': 46800.00,
                    'bb_upper': 48000.00,
                    'bb_lower': 45000.00,
                    'volatility_7d': 85.2,
                    'atr': 1200.00
                }
            },
            'funding_info': {
                'current_rate': {
                    'funding_rate': 0.0001,
                    'funding_time': 1640995200000
                },
                'recent_rates': [...],
                'open_interest': {
                    'open_interest': 123456.789
                }
            },
            'market_depth': {
                'bids': [[46990.0, 1.234], [46980.0, 2.345]],
                'asks': [[47010.0, 1.567], [47020.0, 2.678]]
            }
        }
    }
}
```

## AI Prompt工程与优化

### 第五阶段：AI输入准备

#### 5.1 增强时间周期分析体系

系统现在支持5层时间周期分析，提供从超短期到宏观的全方位市场视角：

1. **15分钟** - 超短期详细分析：捕捉日内波动，短期支撑阻力
2. **1小时** - 短期趋势分析：短期趋势确认，技术指标精确计算
3. **4小时** - 中短期趋势分析：中期趋势判断，重要技术位识别
4. **日线** - 中期趋势分析：主要趋势方向，关键支撑阻力位
5. **月线** - 长期全局分析：宏观趋势识别，重大支撑阻力位

#### 5.2 系统提示词设计 (_build_enhanced_system_prompt)

**核心设计原则**
1. **角色定位明确**: 专业的加密货币期货交易分析师
2. **能力边界清晰**: 明确列出分析能力范围
3. **输出格式标准化**: 要求JSON格式输出，便于程序解析
4. **风险意识强化**: 强调期货杠杆风险和风险管理

**系统提示词结构**
```python
system_prompt = """
你是一个专业的加密货币期货交易分析师，擅长多时间周期分析和量化交易策略。

分析能力:
1. 多时间周期技术分析 (1分钟到周线)
2. 期货特有指标分析 (资金费率、持仓量、多空比)
3. 波动率和趋势强度分析
4. 市场情绪和资金流向分析
5. 风险评估和仓位管理建议

分析要求:
- 结合多个时间维度进行综合判断
- 考虑期货市场的杠杆风险
- 评估资金费率对价格的影响
- 分析持仓量变化的市场含义
- 提供具体的入场、止损、止盈策略

输出格式 (JSON):
{
    "market_overview": {
        "overall_sentiment": "bullish/bearish/neutral",
        "market_phase": "trending/consolidation/reversal",
        "key_levels": {
            "support": [价格1, 价格2],
            "resistance": [价格1, 价格2]
        },
        "volatility_assessment": "low/medium/high",
        "funding_rate_impact": "positive/negative/neutral"
    },
    "timeframe_analysis": {
        "超短期(1-15分钟)": "分析内容",
        "短期(1-4小时)": "分析内容",
        "中期(日线-周线)": "分析内容",
        "长期(月线及以上)": "分析内容"
    },
    "recommendations": [
        {
            "symbol": "币种符号",
            "action": "long/short/hold",
            "confidence": "信心度(0-100)",
            "timeframe": "建议操作时间周期",
            "entry_price": "入场价格",
            "stop_loss": "止损价格",
            "take_profit": ["止盈价格1", "止盈价格2"],
            "position_size": "建议仓位比例(0.1-1.0)",
            "leverage": "建议杠杆倍数(1-10)",
            "risk_level": "风险等级(low/medium/high)",
            "reason": "详细分析理由",
            "timeframe_confluence": "多时间周期一致性分析",
            "risk_reward_ratio": "风险收益比"
        }
    ],
    "risk_warnings": ["具体风险警告"],
    "market_catalysts": ["可能影响价格的因素"]
}
"""
```

#### 5.2 用户提示词构建 (_build_comprehensive_analysis_prompt)

**数据组织策略**
1. **分层次展示**: 概览→多时间周期→期货特有数据
2. **关键信息突出**: 重要指标和异常情况优先显示
3. **上下文完整**: 提供充分的市场背景信息

**市场数据摘要格式化 (_format_market_data_summary)**
```python
def format_market_summary(data):
    summary = f"""
账户状态:
- 总余额: {account_balance:.2f} USDT
- 未实现盈亏: {unrealized_pnl:.2f} USDT
- 可用余额: {available_balance:.2f} USDT

当前持仓:
- BTCUSDT: 0.001, 盈亏: +2.00 USDT
- ETHUSDT: 0.01, 盈亏: -5.00 USDT

BTCUSDT (futures):
- 当前价格: $47,000.00
- 24h涨跌: +2.17%
- 24h最高: $48,000.00
- 24h最低: $46,000.00
- 24h成交量: 123,456
- RSI: 65.1
- SMA20: $46,800.00
- MACD: 123.45
"""
```

**多时间周期数据格式化 (_format_timeframe_data)**
```python
def format_timeframe_analysis(data):
    analysis = f"""
=== BTC 多时间周期分析 ===

1h 时间周期:
- 当前价格: $47,000.00
- 移动平均线: SMA7: $46,900.00, SMA20: $46,800.00, SMA50: $46,500.00
- 趋势方向: 上升趋势 (价格在SMA20上方)
- RSI: 65.1 (正常)
- MACD: 123.45, 信号线: 98.76 (金叉, 柱状图增强)
- 布林带: 上轨$48,000.00, 下轨$45,000.00 (带宽正常, 位于带内75%位置)
- 波动率: 7日波动率: 85.2%, ATR: $1,200.00, ATR%: 2.55%
- 成交量: 放量 (比率: 1.8x)
- 价格区间: 24h范围: $46,000.00 - $48,000.00
- 趋势分析: 趋势强度: 78.5%, 动量: +3.21%

4h 时间周期:
...
"""
```

**期货特有数据格式化 (_format_futures_specific_data)**
```python
def format_futures_data(data):
    futures_info = f"""
=== BTC 期货数据 ===
- 当前资金费率: 0.0100% (多头付费)
- 近3期平均费率: 0.0085%
- 持仓量: 123,456
- 买卖价差: 0.021%
"""
```

#### 5.3 完整用户提示词结构

```python
comprehensive_prompt = f"""
请基于以下全面的期货市场数据进行深度分析:

=== 市场数据概览 ===
{market_summary}

=== 多时间周期技术分析 ===
{timeframe_analysis}

=== 期货市场特有数据 ===
{futures_specific}

=== 用户策略偏好 ===
{user_strategy_prompt}

=== 分析要求 ===
1. 重点关注币种: BTC, ETH, SOL
2. 核心分析时间周期: 1h, 4h, 1d
3. 进行多时间周期共振分析
4. 评估期货特有风险 (资金费率、持仓量变化)
5. 提供具体的交易策略和风险管理建议

=== 当前时间 ===
2024-01-01 12:00:00 UTC

请基于以上数据进行专业的期货交易分析，特别注意:
- 多时间周期的趋势一致性
- 资金费率对价格走势的影响
- 持仓量变化反映的市场情绪
- 波动率水平对交易策略的影响
- 合理的杠杆和仓位管理建议
"""
```

### 第六阶段：AI响应处理

#### 6.1 响应解析策略 (_parse_enhanced_analysis_response)

**分层解析方法**
1. **JSON格式验证**: 首先尝试JSON解析
2. **结构完整性检查**: 验证必需字段是否存在
3. **文本提取备用**: JSON解析失败时的文本提取
4. **错误容错处理**: 确保系统稳定性

```python
def parse_ai_response(response):
    try:
        content = response["choices"][0]["message"]["content"]

        # 尝试JSON解析
        if content.strip().startswith('{'):
            parsed_result = json.loads(content)

            # 验证结构
            if validate_structure(parsed_result):
                return parsed_result
            else:
                return create_partial_result(parsed_result)
        else:
            # 文本提取
            return extract_key_insights(content)

    except Exception as e:
        return create_error_response(e, response)
```

#### 6.2 结构验证

```python
def validate_analysis_structure(result):
    required_fields = [
        "market_overview",
        "recommendations"
    ]
    return all(field in result for field in required_fields)
```

### 第七阶段：历史记录与输出

#### 7.1 输入历史记录 (EnhancedHistoryLogger.log_model_input)

记录到 `input-history.txt` 的内容包括：
```python
input_log_entry = {
    "timestamp": "2024-01-01T12:00:00Z",
    "prompt_type": "comprehensive_futures_analysis",
    "user_prompt": user_strategy_prompt,
    "system_prompt": system_prompt_summary,
    "market_data_summary": {
        "symbols_analyzed": ["BTCUSDT", "ETHUSDT", "SOLUSDT"],
        "timeframes": ["1h", "4h", "1d"],
        "account_balance": 1000.00,
        "active_positions": 2,
        "data_points_processed": 2900  # 总K线数据点（增强5周期分析）
    },
    "analysis_context": {
        "focus_timeframes": ["15m", "1h", "4h", "1d", "1M"],
        "analysis_type": "futures_comprehensive"
    }
}
```

#### 7.2 输出历史记录 (EnhancedHistoryLogger.log_model_output)

记录到 `history.txt` 的内容包括：
```python
output_log_entry = {
    "timestamp": "2024-01-01T12:00:05Z",
    "output_type": "comprehensive_futures_analysis_result",
    "processing_time": 5.23,
    "model_response": {
        "market_overview": {
            "overall_sentiment": "bullish",
            "market_phase": "trending",
            "volatility_assessment": "medium"
        },
        "recommendations": [
            {
                "symbol": "BTCUSDT",
                "action": "long",
                "confidence": 85,
                "entry_price": 47000,
                "stop_loss": 46000,
                "take_profit": [48000, 49000],
                "leverage": 3,
                "risk_level": "medium"
            }
        ]
    },
    "symbols_analyzed": ["BTCUSDT", "ETHUSDT", "SOLUSDT"],
    "analysis_quality": "complete"
}
```

## Prompt优化最佳实践

### 1. 数据精简策略

**优先级排序**
- **高优先级**: 当前价格、RSI、MACD、趋势方向、资金费率
- **中优先级**: 移动平均线、布林带、成交量、波动率
- **低优先级**: 详细的订单簿数据、过多的历史统计

**数据量控制**
- 限制提示词总长度在16K tokens以内
- 保留最近的K线数据，历史数据仅提供关键统计
- 使用数据摘要替代原始数据

### 2. 指标选择优化

**增强多时间周期重点指标**
- **超短期 (15m)**: RSI, MACD, 成交量放大, 短期支撑阻力
- **短期 (1h)**: 移动平均线系统, 布林带, ATR, 趋势确认
- **中短期 (4h)**: 中期趋势指标, 重要技术位, 成交量趋势
- **中期 (1d)**: 主要趋势方向, 关键支撑阻力位, 长期均线
- **长期 (1M)**: 宏观趋势识别, 重大支撑阻力位, 长期周期性

**期货特有指标**
- **资金费率**: 当前费率 + 近期趋势
- **持仓量**: 当前值 + 变化趋势
- **多空比**: 如果可获取

### 3. 提示词结构优化

**信息层次化**
1. **概览信息**: 价格、涨跌幅、成交量
2. **技术分析**: 按时间周期组织的指标
3. **特殊信息**: 期货特有数据、异常情况
4. **用户偏好**: 策略类型、风险偏好

**关键词强化**
- 使用"重点关注"、"特别注意"等关键词
- 明确分析要求和输出格式
- 强调期货市场的特殊性

### 4. 输出格式优化

**JSON结构设计**
- 嵌套层次不超过3层
- 数值字段使用明确的数据类型
- 枚举值使用统一的标准

**置信度量化**
- 为每个建议提供0-100的置信度评分
- 根据数据质量和市场条件动态调整
- 明确置信度的计算依据

### 5. 错误处理优化

**容错机制**
- AI输出格式错误时的文本解析
- 关键字段缺失时的默认值设置
- 异常情况的安全模式响应

**质量验证**
- 响应完整性检查
- 逻辑一致性验证
- 数值合理性校验

## 性能监控与优化

### 1. 响应时间监控

**关键指标**
- API调用时间
- 数据处理时间
- AI分析时间
- 总体响应时间

**优化策略**
- 并发数据获取
- 缓存频繁访问的数据
- 压缩提示词长度

### 2. 分析质量评估

**质量指标**
- JSON解析成功率
- 完整响应比例
- 建议的可执行性
- 历史预测准确性

**改进方法**
- A/B测试不同的提示词版本
- 收集用户反馈
- 定期评估和调整

## 总结

本系统的数据处理和AI分析流程经过精心设计和优化，从原始的Binance API数据到最终的交易建议，每一步都进行了增强：

### 核心优化成果

1. **增强多时间周期分析**: 新增15分钟和月线周期，形成从超短期到宏观的5层分析体系
2. **数据完整性**: 获取全面的期货市场数据，确保技术指标计算准确性
3. **处理效率**: 异步并发处理提高性能，数据量优化平衡精度和效率
4. **指标丰富性**: 50+项技术指标提供全面分析，覆盖所有时间周期
5. **AI提示优化**: 结构化、层次化的提示词设计，支持多维度分析
6. **输出标准化**: JSON格式便于程序处理
7. **历史追踪**: 完整的分析历史记录，包含AI输入输出详细日志

### 时间周期分析体系

- **15分钟**: 超短期详细分析，捕捉日内波动和短期支撑阻力
- **1小时**: 短期趋势分析，确保技术指标精确计算
- **4小时**: 中短期趋势分析，重要技术位识别
- **日线**: 中期趋势分析，主要趋势方向判断
- **月线**: 长期全局分析，宏观趋势识别和重大支撑阻力位

### 实际效果验证

从实际运行结果可以看到，增强的多时间周期分析系统能够：
- 提供更精细的市场分析（如15分钟级别的RSI超买信号）
- 识别多时间周期共振现象（如4小时超买与1小时死叉的共振）
- 给出更精准的交易建议（入场价格、止损位、杠杆建议）
- 提供全面的风险评估和管理建议

通过这个完整的数据处理和AI分析管道，系统能够为期货交易提供专业、准确、及时的多维度分析和建议。